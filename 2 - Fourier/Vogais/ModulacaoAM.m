%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% 0 - Boas práticasclear all;                        % apaga todas as variáveisclose all;                        % fechar as figurasclc;                              % limpa o ambiente de simulação%%% Pacotespkg load signal                   % pacote de sinaispkg load control                  % pacote de controle%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% 1 - Leio o sinal g(t) em um vetor g[k] [gk, fs] = audioread ('Gaita_Blues.wav');  % lendo a vogal a.wavread                                            % gk = vetor de amostras do sinal  Ts      = 1/fs;                           % taxa de amostragem                                                                                        trecho  = gk(295735:295735+300);        % trecho final da frase musical  Np      = length(trecho);  tempo   = linspace(0,Np*Ts,Np);           % ele gera o vertor tempo para trecho    figure(1)    plot(tempo,trecho, 'linewidth', 3);       % Trecho base para o AM  grid; xlabel('Tempo em segundos');  ylabel('Amplitude em volts');  title('Mensagem do AM');                  % complemento do gráfico                %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% 2 - determinar o comportamento do sinal na frequência    Ftrecho = fftshift(fft(trecho));                   % f - fast; f -  Fourier; t - transform        Modulo  = abs(Ftrecho);                            % múdulo de Fourier    Fase    = angle(Ftrecho);                          % fase de Fourier        freq    = linspace(-fs/2,fs/2,Np);       % vetor frequência          figure(2)    plot(freq,Modulo, 'linewidth', 3);       % Trecho base para o AM  grid; xlabel('Frequência em Hz');  ylabel('Amplitude em volts');  title('Mensagem do AM');                 % complemento do gráfico  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% 3 - filtragem do sinal em análisefc     = 3000;                              % frequência de cortewc     = 2*pi*fc;                           % frequência em rd/sRC     = 1/wc;                              % determino RCw      = freq*2*pi;                         % colocar as frequências de Fourier em rd/sFiltro = @(RC,w)  1./(j*w*RC+1);            % projeto do filtro%%% Filtrando o sinalGaitaFiltrada = Filtro(RC,w).*Filtro(RC,w).*Ftrecho';       % filtro no domínio da frequência%%% Voltar para o domínio do tempo - sinteseGaitaGrave    = ifft(fftshift(GaitaFiltrada));figure(3)  subplot(2,1,1)  plot(freq,Modulo, 'linewidth', 3,freq,500*abs(Filtro(RC,w)), 'linewidth', 3);       % Trecho base para o AM  grid; xlabel('Frequência em Hz');  ylabel('Amplitude em volts');  title('Mensagem do AM');                 % complemento do gráfico    subplot(2,1,2)  plot(freq,abs(GaitaFiltrada), 'linewidth', 3);       % Trecho base para o AM  grid; xlabel('Frequência em Hzs');  ylabel('Amplitude em volts');  title('Mensagem do AM');                 % complemento do gráfico%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% 4 - Modulação em amplitude%%% Portadorafp  = 15000;                   % frequência da portadorafp1 = 10000;                   % frequência da portadoraAp  = 1;                       % amplitude da portadorayp  = Ap*cos(2*pi*fp*tempo);   % portadorayp1 = Ap*cos(2*pi*fp1*tempo); % portadora 1%%% mensagem - Gaita filtrada - normalizadam  = GaitaGrave/max(GaitaGrave); %%% sinal modulado = m(t) * cos(wc t)modulado  = yp.*m;           % produto da mensagem pela portadoramodulado1 = yp1.*m;          % produto da mensagem pela portadora%%% Fourier do sinal moduladomoduladoF  = abs(fftshift(fft(modulado)));moduladoF1 = abs(fftshift(fft(modulado1)));%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% 5 - Visualizaçãofigure(4)subplot(2,2,1)plot(tempo,m,'linewidth', 3);gridsubplot(2,2,2)plot(tempo,modulado,'linewidth', 3,tempo,m,'linewidth', 3);gridsubplot(2,2,3)plot(freq,abs(GaitaFiltrada),'linewidth', 3);gridsubplot(2,2,4)plot(freq,moduladoF,'linewidth', 3,freq,moduladoF1,'linewidth', 3);grid%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% 6 - Demodulador%%% demodular o sinal - Filtro_Passa_Baixas(emod(t) * portadora)produto  = yp.*modulado;            % produto do sinal modulado pela portadoraproduto1 = yp1.*modulado1;          % produto do sinal modulado pela portadora%%% filtrando o produtoN   = 1;                             % numeradorD   = [RC 1];                        % denominadorFPB = tf(N,D);                       % função de tranferência do filtro%% aplicando o filtromensagem  = lsim(FPB,produto,tempo);mensagem1 = lsim(FPB,produto1,tempo);%%% Fourier dos sinais: produto e mensagemprodutoF  = abs(fftshift(fft(produto1)));mensagemF = abs(fftshift(fft(mensagem1)));%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% 7 - Visualizaçãofigure(5)subplot(2,2,1)plot(tempo,produto1,'linewidth', 3);gridsubplot(2,2,2)plot(tempo,mensagem1,'linewidth', 3,tempo,m,'linewidth', 3);gridsubplot(2,2,3)plot(freq,abs(produtoF),'linewidth', 3);gridsubplot(2,2,4)plot(freq,abs(mensagemF),'linewidth', 3);grid         